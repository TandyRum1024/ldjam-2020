// 2020-10-05 06:34:11
#event properties (no comments/etc. here are saved)
parent_index = -1;
persistent = true;
uses_physics = false;

#event create Game handler
singleton_check();
randomize();

#section Define const
// Tiles
enum eTILE
{
    NONE = 0,
    WALL,
    TARGET,
    REFLECT,
    BREAKABLE,
    PLAYERSPAWN
}

global.tileToObject = makemap(
        makearray(eTILE.NONE, oTileFloor),
        makearray(eTILE.WALL, oTile),
        makearray(eTILE.BREAKABLE, oTileBreakable),
        makearray(eTILE.REFLECT, oTileReflect),
        makearray(eTILE.TARGET, oTileTarget),
        makearray(eTILE.PLAYERSPAWN, oTilePlayerSpawn)
    );

// Game physics
global.phyTimescale = 1;

// Sound & music
global.soundVolumeMaster = 0.75;

global.soundVolumeFX = 1.0;
global.soundVolumeMusic1 = 1.0;
global.soundVolumeMusic2 = 0.0;
global.soundVolumeMusic3 = 0.0;

global.soundVolumeMusic1SND = audio_play_sound(musLv1, 0, true);
global.soundVolumeMusic2SND = audio_play_sound(musLv2, 0, true);
global.soundVolumeMusic3SND = audio_play_sound(musLv3, 0, true);
audio_sound_gain(global.soundVolumeMusic1SND, global.soundVolumeMusic1, 0);
audio_sound_gain(global.soundVolumeMusic2SND, global.soundVolumeMusic2, 0);
audio_sound_gain(global.soundVolumeMusic3SND, global.soundVolumeMusic3, 0);
audio_master_gain(global.soundVolumeMaster);

// Transition
transition = false;
transitionDest = "default";
transitionFadeout = false;
transitionFrames = 0;
transitionFramesMax = room_speed * 0.5;

#section Spawn essential objects
instance_create(0, 0, oUI);

#section Load data
/// Room / maps
var _tile_table = makemap(
        makearray("none", eTILE.NONE),
        makearray("wall", eTILE.WALL),
        makearray("breakable", eTILE.BREAKABLE),
        makearray("reflect", eTILE.REFLECT),
        makearray("target", eTILE.TARGET),
        makearray("playerspawn", eTILE.PLAYERSPAWN),
    );

global.roomData = file_json_load("data/maps.json");
global.roomDataRoomList = global.roomData[? "rooms"];
global.roomDataTileLUT  = global.roomData[? "tiles"];
for (var _key=ds_map_find_first(global.roomDataTileLUT); _key!=undefined; _key=ds_map_find_next(global.roomDataTileLUT, _key))
{
    var _tilename = global.roomDataTileLUT[? _key];
    var _tiletype = _tile_table[? _tilename];
    if (_tiletype == undefined) _tiletype = eTILE.NONE;
    global.roomDataTileLUT[? _key] = _tiletype;
}

// (delete temp. table)
ds_map_destroy(_tile_table);

#section FSM
fsm_init();
fsm_add_state("boot", game_state_boot);
fsm_add_state("title", game_state_title);
fsm_add_state("gameplay", game_state_gameplay, game_state_gameplay_cleanup);
fsm_switch("boot");

#section Game input
inputKeyLeft  = vk_left;
inputKeyRight = vk_right;
inputKeyUp    = vk_up;
inputKeyDown  = vk_down;
inputKeyAction = ord('Z');

inputH = 0;
inputV = 0;
inputAction      = false;
inputActionPress = false;
inputActionRel   = false;

#section Visual stuffs
surfRoom = surface_create(1, 1);
drawRoomSurfaces = false;

winW = window_get_width();
winH = window_get_height();

#section Debug
debug_emit_message_init();

#event destroy Destroy
if (singletonInit)
{
    if (ds_exists(global.roomData, ds_type_map)) ds_map_destroy(global.roomData);
    debug_emit_message_destroy();
}


#event step FSM
fsm_update();

// Update transition
if (transition)
{
    if (transitionFadeout)
    {
        if (transitionFrames < transitionFramesMax)
        {
            transitionFrames++;
        }
        else
        {
            fsm_switch(transitionDest);
            transitionFadeout = false;
            transitionFrames = 0;
        }
    }
    else
    {
        if (transitionFrames < transitionFramesMax)
        {
            transitionFrames++;
        }
        else
        {
            transition = false;
            transitionFadeout = false;
            transitionFrames = 0;
        }
    }
}

#event step_begin Listen to input
inputH = keyboard_check(inputKeyRight) - keyboard_check(inputKeyLeft);
inputV = keyboard_check(inputKeyDown) - keyboard_check(inputKeyUp);
inputAction      = keyboard_check(inputKeyAction);
inputActionPress = keyboard_check_pressed(inputKeyAction);
inputActionRel   = keyboard_check_released(inputKeyAction);

#section Update window sizes
var _ww = window_get_width();
var _wh = window_get_height();
if ((winW != _ww || winH != _wh) && _ww != 0 && _wh != 0)
{
    winW = _ww;
    winH = _wh;
    // resize appsurf & GUI
    surface_resize(application_surface, _ww, _wh);
    display_set_gui_size(_ww, _wh);
}

#event step_end Update surfaces
if (drawRoomSurfaces)
{
    application_surface_enable(false);
    application_surface_draw_enable(false);
    
    if (!surface_exists(surfRoom) || surface_get_width(surfRoom) != oMap.roomW || surface_get_height(surfRoom) != oMap.roomH)
    {
        surfRoom = surface_create(oMap.roomW, oMap.roomH);
        view_surface_id[0] = surfRoom;
    }
}
else
{
    application_surface_enable(true);
    application_surface_draw_enable(true);
}

#event draw_begin Begin grabbing the draws results if needed
/*
if (drawRoomSurfaces)
{
    surface_set_target(surfRoom);
    draw_clear_alpha(0, 0);
}
*/

#event draw_gui_end Draw transition
if (transition)
{
    if (transitionFadeout)
    {
        var _t = calc_interp(transitionFrames, transitionFramesMax, 1.5, 3.0);
        ui_draw_rect(0, 0, winW, winH * _t, c_black, _t);
    }
    else
    {
        var _t = 1.0 - calc_interp(transitionFrames, transitionFramesMax, 1.5, 3.0);
        ui_draw_rect(0, winH * (1.0 - _t), winW, winH * _t, c_black, _t);
    }
}


#event draw_post Draw 'infinite' rooms if needed
if (drawRoomSurfaces && oMap.roomReady)
{
    // End surface draw grabbing
    /*
    surface_set_target(surfRoom);
    draw_clear_alpha(0, 0);
    draw_surface(application_surface, 0, 0);
    surface_reset_target();
    */
    
    var _room_w = surface_get_width(surfRoom);
    var _room_h = surface_get_height(surfRoom);
    var _room_cx = floor((winW - _room_w) * 0.5);
    var _room_cy = floor((winH - _room_h) * 0.5);
    
    // Draw center room
    draw_surface(surfRoom, _room_cx, _room_cy);
    
    // Draw edge rooms
    var _room_num_x = max(ceil((_room_cx) / _room_w), 1);
    var _room_num_y = max(ceil((_room_cy) / _room_h), 1);
    
    // Center vertical
    for (var _y=0; _y<_room_num_y; _y++)
    {
        var _decay = 1.0 - (_y / (_room_num_y));
        var _col = make_colour_hsv(0, 0, _decay * 25 + 25);
        draw_surface_ext(surfRoom, _room_cx, _room_cy - _room_h - _y * _room_h, 1, 1, 0, _col, 1.0);
        draw_surface_ext(surfRoom, _room_cx, _room_cy + _room_h + _y * _room_h, 1, 1, 0, _col, 1.0);
    }
    
    // Horizontal & vertical
    for (var _x=0; _x<_room_num_x; _x++)
    {
        var _decay = 1.0 - (_x / (_room_num_x));
        var _col = make_colour_hsv(0, 0, _decay * 25 + 25);
        
        var _room_x1 = _room_cx - _room_w - _x * _room_w;
        var _room_x2 = _room_cx + _room_w + _x * _room_w;
        draw_surface_ext(surfRoom, _room_x1, _room_cy, 1, 1, 0, _col, 1.0);
        draw_surface_ext(surfRoom, _room_x2, _room_cy, 1, 1, 0, _col, 1.0);
        
        for (var _y=0; _y<_room_num_y; _y++)
        {
            _decay *= 1.0 - (_y / (_room_num_y));
            _col = make_colour_hsv(0, 0, _decay * 25 + 25);
            
            draw_surface_ext(surfRoom, _room_x1, _room_cy - _room_h - _y * _room_h, 1, 1, 0, _col, 1.0);
            draw_surface_ext(surfRoom, _room_x1, _room_cy + _room_h + _y * _room_h, 1, 1, 0, _col, 1.0);
            draw_surface_ext(surfRoom, _room_x2, _room_cy - _room_h - _y * _room_h, 1, 1, 0, _col, 1.0);
            draw_surface_ext(surfRoom, _room_x2, _room_cy + _room_h + _y * _room_h, 1, 1, 0, _col, 1.0);
        }
    }
}