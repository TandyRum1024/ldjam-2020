<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mpa handler
singleton_check();

// Room data
roomData = ds_grid_create(1, 1);
roomDataRaw = undefined;
roomTileW = 0;
roomTileH = 0;

roomUnit = 32;
roomW = 1;
roomH = 1;

roomTargetNum = 0;
roomReady = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
if (singletonInit)
{
    ds_grid_destroy(roomData);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Active instances
with (oTile)
{
    event_user(0);
}
with (oTileFloor)
{
    event_user(0);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load random map
// Destroy all entity
instance_destroy(oGameEntity);
instance_destroy(oTile);
instance_destroy(oTileFloor);

// Fetch random room
roomDataRaw = global.roomDataRoomList[| irandom_range(0, ds_list_size(global.roomDataRoomList)-1)]; // roomDataRaw now contains a list of string

// Start building room from a list of string
if (roomDataRaw != undefined)
{
    roomTileW = string_length(roomDataRaw[| 0]);
    roomTileH = ds_list_size(roomDataRaw);
    roomW = roomTileW * TILE_UNIT;
    roomH = roomTileH * TILE_UNIT;
    
    ds_grid_resize(roomData, roomTileW, roomTileH);
    
    for (var _y=0; _y&lt;roomTileH; _y++)
    {
        var _line = roomDataRaw[| _y];
        for (var _x=0; _x&lt;roomTileW; _x++)
        {
            var _char = string_char_at(_line, _x + 1);
            var _tile = ds_map_fetch_or_not(global.roomDataTileLUT, _char, eTILE.NONE);
            
            roomData[# _x, _y] = _tile;
            
            // Spawn tile
            var _tile_obj = global.tileToObject[? _tile];
            if (_tile_obj != undefined)
            {
                var _tile_x = _x * TILE_UNIT, _tile_y = _y * TILE_UNIT;
                instance_create(_tile_x, _tile_y, _tile_obj);
            }
        }
    }
    
    // Update room view &amp; surface
    game_update_views();
    
    // Calculate target number
    roomTargetNum = instance_number(oTileTarget);
    roomReady = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
