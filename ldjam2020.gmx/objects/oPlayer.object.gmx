<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>oGameEntity</parentName>
  <maskName>maskPlayer</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stuffs
// Physics
vx = 0;
vy = 0;

// Movement
moveVelMax = 6;
moveVelAcc = 1;
moveVelDamp = 0.7;
moveDir = 0;
moveFacingH = 1;

// Input
inputH = 0;
inputV = 0;
inputAction      = false;
inputActionPress = false;
inputActionRel   = false;

// ETC
parryDist = TILE_UNIT * 2;
parryBoost = 0;
parryInst = noone;
parryCtr       = 0;
parryCtrMax    = 15;
parryCtrMaxHit = 30;

hp = 3;
iframes = room_speed;
iframesMax = room_speed;

// FSM
fsm_init();
fsm_add_state("normal", player_state_normal);
fsm_switch("normal");

// Anim
anim_init();
anim_define("idle", player_anim_idle);
anim_define("move", player_anim_move);
anim_define("parry", player_anim_parry);
anim_fire("idle");
animator.BUF_CTR = 0;
animator.BUF_SND_PLAYED = false;
animator.BUF_SND_CTR = 0;
animator.sprite_index = sprPlayer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ANIM
// Update animation
with (animator)
{
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FSM
fsm_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw at all four sides of room
var _x = floor(x + animator.x);
var _y = floor(y + animator.y);
var _angle = image_angle + animator.image_angle;
var _spr = animator.sprite_index, _ind = animator.image_index;
var _alpha = image_alpha * (((fsmStateCtr &gt;&gt; 1) &amp; 1) || iframes &lt;= 0);
var _xs = animator.image_xscale, _ys = animator.image_yscale;
var _sx = _xs * 2, _sy = _ys * 2;

// Draw direction
var _xo = lengthdir_x(parryDist, moveDir);
var _yo = lengthdir_y(parryDist, moveDir);
draw_arrow(_x, _y, _x + _xo, _y + _yo, TILE_UNIT_HALF);

// Draw sprite(s)
draw_sprite_ext(_spr, _ind, _x + _sx, _y + _sy, _xs, _ys, _angle, c_black, _alpha); // shadow
draw_sprite_ext(_spr, _ind, _x, _y, _xs, _ys, _angle, image_blend, _alpha);

var _room_w = oMap.roomW, _room_h = oMap.roomH;
if (_x &gt; _room_w * 0.5) // draw at left
{
    draw_sprite_ext(_spr, _ind, _x - _room_w + _sx, _y + _sy, _xs, _ys, _angle, c_black, _alpha); // L shadow
    draw_sprite_ext(_spr, _ind, _x - _room_w, _y, _xs, _ys, _angle, image_blend, _alpha); // L
}
else // draw at right
{
    draw_sprite_ext(_spr, _ind, _x + _room_w + _sx, _y + _sy, _xs, _ys, _angle, c_black, _alpha); // R shadow
    draw_sprite_ext(_spr, _ind, _x + _room_w, _y, _xs, _ys, _angle, image_blend, _alpha); // R
}
if (_y &gt; _room_h * 0.5) // draw at top
{
    draw_sprite_ext(_spr, _ind, _x + _sx, _y - _room_h + _sy, _xs, _ys, _angle, c_black, _alpha); // U
    draw_sprite_ext(_spr, _ind, _x, _y - _room_h, _xs, _ys, _angle, image_blend, _alpha); // U
}
else // draw at bottom
{
    draw_sprite_ext(_spr, _ind, _x + _sx, _y + _room_h + _sy, _xs, _ys, _angle, c_black, _alpha); // D
    draw_sprite_ext(_spr, _ind, _x, _y + _room_h, _xs, _ys, _angle, image_blend, _alpha); // D
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
