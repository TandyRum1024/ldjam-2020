<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oGameEntity</parentName>
  <maskName>maskBullet</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bullet
image_speed = 0.25;

vx = 0;
vy = 0;

moveVel = 4;
moveDir = 0;
t = 0;

pauseCtr = 0;

lethal = false;
mayPlaySound = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t++;
var _target = noone;

if (pauseCtr &gt; 0)
{
    pauseCtr--;
    lethal = false;
}
else
{
    var _svx = sign(vx);
    var _svy = sign(vy);
    
    // Move &amp; check for collision with tiles
    var _maxstep = abs(bbox_bottom - bbox_top);
    if (entity_place_meeting(x + vx, y, oTileReflect) || entity_place_meeting(x + vx, y, oTileTarget))
    {
        while (!(entity_place_meeting(x + _svx, y, oTileReflect) || entity_place_meeting(x + _svx, y, oTileTarget)) &amp;&amp; _maxstep-- &gt; 0)
            x += _svx;
        
        if (_target == noone)
            _target = entity_instance_place(x + _svx, y, oTileTarget);
        vx *= -1;
        
        event_user(1);
    }
    x += vx;
    
    var _maxstep = abs(bbox_right - bbox_left);
    if (entity_place_meeting(x, y + vy, oTileReflect) || entity_place_meeting(x, y + vy, oTileTarget))
    {
        while (!(entity_place_meeting(x, y + _svy, oTileReflect) || entity_place_meeting(x, y + _svy, oTileTarget)) &amp;&amp; _maxstep-- &gt; 0)
            y += _svy;
        
        if (_target == noone)
            _target = entity_instance_place(x, y + _svy, oTileTarget);
        vy *= -1;
        
        event_user(1);
    }
    y += vy;
}

// Room constraint
if (x &lt; 0) x += oMap.roomW;
if (x &gt;= oMap.roomW) x -= oMap.roomW;
if (y &lt; 0) y += oMap.roomH;
if (y &gt;= oMap.roomH) y -= oMap.roomH;

// Update depth
depth = -10 - y;

// Bullet trail
if (t % 4) // every 4 frames
{
    var _fx = instance_create(x, y, oBulletTrail);
    _fx.image_angle = moveDir;
    _fx.image_blend = c_red;
    _fx.depth = -1;
}

if (pauseCtr &lt;= 0)
{
    // Update lethal flag
    if (!entity_place_meeting(x, y, oPlayer))
        lethal = true;
    
    // Check for collision
    // (vs. target)
    if (_target != noone &amp;&amp; instance_exists(_target))
    {
        var _fx = instance_create(_target.x, _target.y, oFXAnimation);
        _fx.sprite_index = sprFXParryImpact;
        _fx.depth = -20;
        
        instance_destroy(id);
        instance_destroy(_target);
        
        // play sound
        sfx_play(choose(fxBreak1, fxBreak2), 0.5, random_range(0.8, 1.2));
    }
    // (vs. breakable)
    var _breakable = entity_instance_place(x, y, oTileBreakable);
    if (_breakable != noone &amp;&amp; instance_exists(_breakable))
    {
        instance_destroy(_breakable);
        pauseCtr = 8;
        
        // play fx
        repeat (irandom_range(2, 4))
        {
            var _fx = instance_create(x, y, oFXDust);
            _fx.image_blend = make_colour_hsv(random_range(10, 40), random_range(150, 200), random_range(128, 180));
            _fx.image_xscale = random_range(4, 8);
            _fx.image_yscale = random_range(2, 3);
            _fx.vx = random_range(-6, 6);
            _fx.vy = random_range(-6, 6);
            _fx.vz = random_range(-12, -6);
            _fx.x += random_range(-16, 16);
            _fx.y += random_range(-16, 16);
            _fx.z = random_range(-24, -18);
            _fx.depth = -2;
        }
        repeat (irandom_range(8, 16))
        {
            var _fx = instance_create(x, y, oFXDust);
            _fx.image_blend = make_colour_hsv(random_range(40, 60), random_range(150, 200), 255);
            _fx.image_alpha = 0.25;
            _fx.image_xscale = random_range(8, 4);
            _fx.image_yscale = random_range(0.5, 1);
            _fx.life = room_speed;
            _fx.depth = -20;
            _fx.collide = false;
            
            var _dir = random(360), _mag = random_range(3, 6);
            _fx.vx = lengthdir_x(_mag, _dir);
            _fx.vy = lengthdir_y(_mag, _dir);
            _fx.vz = 0;
            _fx.z = -16;
            _fx.grav = 0;
        }
        
        // play sound
        sfx_play(choose(fxBreak1, fxBreak2), 0.5, random_range(0.8, 1.2));
    }
    // (vs. trigger)
    var _trigger = entity_instance_place(x, y, oTriggerParry);
    if (_trigger != noone)
    {
        // redirect
        moveDir = _trigger.image_angle;
        moveVel += _trigger.strength;
        event_user(0);
        pauseCtr = 2;
        lethal = false;
        
        // play fx
        if (!_trigger.fxPlayed)
        {
            var _fx = instance_create(_trigger.x, _trigger.y, oFXAnimation);
            _fx.sprite_index = sprFXParryImpact;
            _fx.depth = -20;
            _trigger.fxPlayed = true;
        }
        
        // apply iframes to player
        with (oPlayer)
        {
            iframes = 15;
        }
        
        // stop any swing sound
        audio_stop_sound(fxSwing);
        
        // play sound
        if (mayPlaySound)
        {
            sfx_play(choose(fxParryImpact1, fxParryImpact2), 0.75, random_range(0.9, 1.1));
            sfx_play(choose(fxBreak1, fxBreak2), 0.4, random_range(0.8, 1.2));
            mayPlaySound = false;
        }
    }
    else if (_trigger == noone)
    {
        mayPlaySound = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update direction
moveDir = point_direction(0, 0, vx, vy);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update velocity
vx = dcos(moveDir) * moveVel;
vy = -dsin(moveDir) * moveVel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw at all four sides of room
var _x = floor(x);
var _y = floor(y);
var _angle = moveDir;
var _xs = image_xscale, _ys = image_yscale;
var _sx = _xs * 2, _sy = _ys * 2;

// Draw sprite(s)
draw_sprite_ext(sprite_index, image_index, _x + _sx, _y + _sy, _xs, _ys, _angle, c_black, image_alpha); // shadow
draw_sprite_ext(sprite_index, image_index, _x, _y, _xs, _ys, _angle, image_blend, image_alpha);

var _room_w = oMap.roomW, _room_h = oMap.roomH;
if (_x &gt; _room_w * 0.5) // draw at left
{
    draw_sprite_ext(sprite_index, image_index, _x - _room_w + _sx, _y + _sy, _xs, _ys, _angle, c_black, image_alpha); // L shadow
    draw_sprite_ext(sprite_index, image_index, _x - _room_w, _y, _xs, _ys, _angle, image_blend, image_alpha); // L
}
else // draw at right
{
    draw_sprite_ext(sprite_index, image_index, _x + _room_w + _sx, _y + _sy, _xs, _ys, _angle, c_black, image_alpha); // R shadow
    draw_sprite_ext(sprite_index, image_index, _x + _room_w, _y, _xs, _ys, _angle, image_blend, image_alpha); // R
}
if (_y &gt; _room_h * 0.5) // draw at top
{
    draw_sprite_ext(sprite_index, image_index, _x + _sx, _y - _room_h + _sy, _xs, _ys, _angle, c_black, image_alpha); // U
    draw_sprite_ext(sprite_index, image_index, _x, _y - _room_h, _xs, _ys, _angle, image_blend, image_alpha); // U
}
else // draw at bottom
{
    draw_sprite_ext(sprite_index, image_index, _x + _sx, _y + _room_h + _sy, _xs, _ys, _angle, c_black, image_alpha); // D
    draw_sprite_ext(sprite_index, image_index, _x, _y + _room_h, _xs, _ys, _angle, image_blend, image_alpha); // D
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
