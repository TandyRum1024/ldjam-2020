<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game handler
singleton_check();
randomize();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define const
// Tiles
enum eTILE
{
    NONE = 0,
    WALL,
    TARGET,
    REFLECT,
    BREAKABLE,
    PLAYERSPAWN
}

global.tileToObject = makemap(
        makearray(eTILE.NONE, oTileFloor),
        makearray(eTILE.WALL, oTile),
        makearray(eTILE.BREAKABLE, oTileBreakable),
        makearray(eTILE.REFLECT, oTileReflect),
        makearray(eTILE.TARGET, oTileTarget),
        makearray(eTILE.PLAYERSPAWN, oTilePlayerSpawn)
    );

// Game physics
global.phyTimescale = 1;

// Sound &amp; music
global.soundVolumeMaster = 0.75;

global.soundVolumeFX = 1.0;
global.soundVolumeMusic1 = 1.0;
global.soundVolumeMusic2 = 0.0;
global.soundVolumeMusic3 = 0.0;

global.soundVolumeMusic1SND = audio_play_sound(musLv1, 0, true);
global.soundVolumeMusic2SND = audio_play_sound(musLv2, 0, true);
global.soundVolumeMusic3SND = audio_play_sound(musLv3, 0, true);
audio_sound_gain(global.soundVolumeMusic1SND, global.soundVolumeMusic1, 0);
audio_sound_gain(global.soundVolumeMusic2SND, global.soundVolumeMusic2, 0);
audio_sound_gain(global.soundVolumeMusic3SND, global.soundVolumeMusic3, 0);
audio_master_gain(global.soundVolumeMaster);

// Transition
transition = false;
transitionDest = "default";
transitionFadeout = false;
transitionFrames = 0;
transitionFramesMax = room_speed * 0.5;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn essential objects
instance_create(0, 0, oUI);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load data
/// Room / maps
var _tile_table = makemap(
        makearray("none", eTILE.NONE),
        makearray("wall", eTILE.WALL),
        makearray("breakable", eTILE.BREAKABLE),
        makearray("reflect", eTILE.REFLECT),
        makearray("target", eTILE.TARGET),
        makearray("playerspawn", eTILE.PLAYERSPAWN),
    );

global.roomData = file_json_load("data/maps.json");
global.roomDataRoomList = global.roomData[? "rooms"];
global.roomDataTileLUT  = global.roomData[? "tiles"];
for (var _key=ds_map_find_first(global.roomDataTileLUT); _key!=undefined; _key=ds_map_find_next(global.roomDataTileLUT, _key))
{
    var _tilename = global.roomDataTileLUT[? _key];
    var _tiletype = _tile_table[? _tilename];
    if (_tiletype == undefined) _tiletype = eTILE.NONE;
    global.roomDataTileLUT[? _key] = _tiletype;
}

// (delete temp. table)
ds_map_destroy(_tile_table);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FSM
fsm_init();
fsm_add_state("boot", game_state_boot);
fsm_add_state("title", game_state_title);
fsm_add_state("gameplay", game_state_gameplay, game_state_gameplay_cleanup);
fsm_switch("boot");

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game input
inputKeyLeft  = vk_left;
inputKeyRight = vk_right;
inputKeyUp    = vk_up;
inputKeyDown  = vk_down;
inputKeyAction = ord('Z');

inputH = 0;
inputV = 0;
inputAction      = false;
inputActionPress = false;
inputActionRel   = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visual stuffs
surfRoom = surface_create(1, 1);
drawRoomSurfaces = false;

winW = window_get_width();
winH = window_get_height();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug
debug_emit_message_init();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
if (singletonInit)
{
    if (ds_exists(global.roomData, ds_type_map)) ds_map_destroy(global.roomData);
    debug_emit_message_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update surfaces
if (drawRoomSurfaces)
{
    application_surface_enable(false);
    application_surface_draw_enable(false);
    
    if (!surface_exists(surfRoom) || surface_get_width(surfRoom) != oMap.roomW || surface_get_height(surfRoom) != oMap.roomH)
    {
        surfRoom = surface_create(oMap.roomW, oMap.roomH);
        view_surface_id[0] = surfRoom;
    }
}
else
{
    application_surface_enable(true);
    application_surface_draw_enable(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Listen to input
inputH = keyboard_check(inputKeyRight) - keyboard_check(inputKeyLeft);
inputV = keyboard_check(inputKeyDown) - keyboard_check(inputKeyUp);
inputAction      = keyboard_check(inputKeyAction);
inputActionPress = keyboard_check_pressed(inputKeyAction);
inputActionRel   = keyboard_check_released(inputKeyAction);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update window sizes
var _ww = window_get_width();
var _wh = window_get_height();
if ((winW != _ww || winH != _wh) &amp;&amp; _ww != 0 &amp;&amp; _wh != 0)
{
    winW = _ww;
    winH = _wh;
    // resize appsurf &amp; GUI
    surface_resize(application_surface, _ww, _wh);
    display_set_gui_size(_ww, _wh);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FSM
fsm_update();

// Update transition
if (transition)
{
    if (transitionFadeout)
    {
        if (transitionFrames &lt; transitionFramesMax)
        {
            transitionFrames++;
        }
        else
        {
            fsm_switch(transitionDest);
            transitionFadeout = false;
            transitionFrames = 0;
        }
    }
    else
    {
        if (transitionFrames &lt; transitionFramesMax)
        {
            transitionFrames++;
        }
        else
        {
            transition = false;
            transitionFadeout = false;
            transitionFrames = 0;
        }
    }
}

// Update dynamic music
if (!audio_is_playing(global.soundVolumeMusic1SND)) global.soundVolumeMusic1SND = audio_play_sound(musLv1, 0, true);
if (!audio_is_playing(global.soundVolumeMusic2SND)) global.soundVolumeMusic2SND = audio_play_sound(musLv2, 0, true);
if (!audio_is_playing(global.soundVolumeMusic3SND)) global.soundVolumeMusic3SND = audio_play_sound(musLv3, 0, true);
audio_sound_gain(global.soundVolumeMusic1SND, global.soundVolumeMusic1, 0);
audio_sound_gain(global.soundVolumeMusic2SND, global.soundVolumeMusic2, 0);
audio_sound_gain(global.soundVolumeMusic3SND, global.soundVolumeMusic3, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw 'infinite' rooms if needed
if (drawRoomSurfaces &amp;&amp; oMap.roomReady)
{
    // End surface draw grabbing
    /*
    surface_set_target(surfRoom);
    draw_clear_alpha(0, 0);
    draw_surface(application_surface, 0, 0);
    surface_reset_target();
    */
    
    var _room_w = surface_get_width(surfRoom);
    var _room_h = surface_get_height(surfRoom);
    var _room_cx = floor((winW - _room_w) * 0.5);
    var _room_cy = floor((winH - _room_h) * 0.5);
    
    // Draw center room
    draw_surface(surfRoom, _room_cx, _room_cy);
    
    // Draw edge rooms
    var _room_num_x = max(ceil((_room_cx) / _room_w), 1);
    var _room_num_y = max(ceil((_room_cy) / _room_h), 1);
    
    // Center vertical
    for (var _y=0; _y&lt;_room_num_y; _y++)
    {
        var _decay = 1.0 - (_y / (_room_num_y));
        var _col = make_colour_hsv(0, 0, _decay * 25 + 25);
        draw_surface_ext(surfRoom, _room_cx, _room_cy - _room_h - _y * _room_h, 1, 1, 0, _col, 1.0);
        draw_surface_ext(surfRoom, _room_cx, _room_cy + _room_h + _y * _room_h, 1, 1, 0, _col, 1.0);
    }
    
    // Horizontal &amp; vertical
    for (var _x=0; _x&lt;_room_num_x; _x++)
    {
        var _decay = 1.0 - (_x / (_room_num_x));
        var _col = make_colour_hsv(0, 0, _decay * 25 + 25);
        
        var _room_x1 = _room_cx - _room_w - _x * _room_w;
        var _room_x2 = _room_cx + _room_w + _x * _room_w;
        draw_surface_ext(surfRoom, _room_x1, _room_cy, 1, 1, 0, _col, 1.0);
        draw_surface_ext(surfRoom, _room_x2, _room_cy, 1, 1, 0, _col, 1.0);
        
        for (var _y=0; _y&lt;_room_num_y; _y++)
        {
            _decay *= 1.0 - (_y / (_room_num_y));
            _col = make_colour_hsv(0, 0, _decay * 25 + 25);
            
            draw_surface_ext(surfRoom, _room_x1, _room_cy - _room_h - _y * _room_h, 1, 1, 0, _col, 1.0);
            draw_surface_ext(surfRoom, _room_x1, _room_cy + _room_h + _y * _room_h, 1, 1, 0, _col, 1.0);
            draw_surface_ext(surfRoom, _room_x2, _room_cy - _room_h - _y * _room_h, 1, 1, 0, _col, 1.0);
            draw_surface_ext(surfRoom, _room_x2, _room_cy + _room_h + _y * _room_h, 1, 1, 0, _col, 1.0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw transition
if (transition)
{
    if (transitionFadeout)
    {
        var _t = calc_interp(transitionFrames, transitionFramesMax, 1.5, 3.0);
        ui_draw_rect(0, 0, winW, winH * _t, c_black, _t);
    }
    else
    {
        var _t = 1.0 - calc_interp(transitionFrames, transitionFramesMax, 1.5, 3.0);
        ui_draw_rect(0, winH * (1.0 - _t), winW, winH * _t, c_black, _t);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin grabbing the draws results if needed
/*
if (drawRoomSurfaces)
{
    surface_set_target(surfRoom);
    draw_clear_alpha(0, 0);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
